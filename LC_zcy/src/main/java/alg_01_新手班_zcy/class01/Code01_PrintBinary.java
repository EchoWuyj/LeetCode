package alg_01_新手班_zcy.class01;

/**
 * @Author Wuyj
 * @DateTime 2022-08-29 19:03
 * @Version 1.0
 */
public class Code01_PrintBinary {
    // 按照二进制的方式输出一个整型数值
    // 2^31次方,所以for循环从31开始
    public static void print(int num) {
        for (int i = 31; i >= 0; i--) {
            // 从最高位31到最低位0,开始和1进行按位&
            // KeyPoint 测试输出的print还是println一开始就想清楚
            System.out.print((num & (1 << i)) == 0 ? "0" : "1");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // 32位
        int num = 8;
        print(8); // 0000 0000 0000 0000 0000 0000 0000 1000
        print(-8);// 1111 1111 1111 1111 1111 1111 1111 1000
        // 先计算-8原码 -> 反码 -> 补码

        //----------------------------------------

        // KeyPoint 表示个数和表示范围区别
        // 2^3一共有8个数字,但是表示数字的范围:0-2^3-1
        // 000 -> 0
        // ...
        // 111 -> 7

        // 无符号数 32位 表示数字范围 0-2^32-1
        // Java 有符号数 一半正一半负 最高位为符号位 所以可以表示数值为31位 所以是 2^31
        // 同时,有效的符号位为30为,还有1位最高位为符号位

        // 非负数范围  [0-2^31-1]
        // 负数范围 [-2^31 -0)
        // 所以java中的int表示数字范围  -2^31 - 2^31-1

        print(Integer.MIN_VALUE); // 负数最小值 1000 0000 0000 0000 0000 0000 0000 0000
        print(Integer.MAX_VALUE); // 负数最大值 0111 1111 1111 1111 1111 1111 1111 1111
        // Integer.MAX_VALUE + 1 = Integer.MIN_VALUE
        // 

        // Integer.MIN_VALUE 10进制 -2147483648 同时2^31=2147483648
        // 补码 1000 0000 0000 0000 0000 0000 0000 0000 -> 最高位是1表示负数
        // 取反 1111 1111 1111 1111 1111 1111 1111 1111
        // 加1  ---------------------------------------
        //      1000 0000 0000 0000 0000 0000 0000 0000 -> 2^31
        // 注意的这里的最高位1是进位所得,不是原来的符号位负数的1

        //----------------------------------------

        print(-1); // 1111 1111 1111 1111 1111 1111 1111 1111

        // 计算机中一般统一用补码来表示有符号数 所以是以 补码 的计算而得的形式进行输出(不是原码)
        // 但是计算补码却是先通过原码(正负) -> 反码 -> 补码 

        // 补码形式 1111 1111 1111 1111 1111 1111 1111 1111
        // 需要转换成原码的形式,进而转换成10进制数字(通过原码看出对应10进制数字)
        // -> 取反 1 000 0000 0000 0000 0000 0000 0000 0000
        // -> 加1  1 000 0000 0000 0000 0000 0000 0000 0001
        // 结果为 -1(10进制)

        //---------------------------------------

        // 一个数的相反数
        // x -> -x=(~x+1) 取反包括符号位
        int x = 5;
        System.out.println(x); // 5
        int b = ~x + 1;
        System.out.println(b); //-5

        // 正数取相反数都有负数对应
        // 负数取相反数基本有正数对应(负数最小值除外)

        // 负数最小值取相反数还是自己

        // 负数最小值 1000 0000 0000 0000 0000 0000 0000 0000
        // 取反      0111 1111 1111 1111 1111 1111 1111 1111
        // 加1       1000 0000 0000 0000 0000 0000 0000 0000
        // 还是自己

    }
}
