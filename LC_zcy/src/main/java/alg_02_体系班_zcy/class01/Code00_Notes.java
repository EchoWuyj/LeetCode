package alg_02_体系班_zcy.class01;

/**
 * @Author Wuyj
 * @DateTime 2022-09-09 22:14
 * @Version 1.0
 */
public class Code00_Notes {

    /*

    KeyPoint 自己手动模拟,自己清晰,层次分明,不能凌乱

    评估算法优劣的核心指标是什么？
        1) 时间复杂度(流程决定)
        2) 额外空间复杂度(流程决定)
        3) 常数项时间(实现细节决定)

     //---------------------------------------

     一.时间复杂度
      1)不关心系数,不关心低阶项,常量,只关心最高阶
        因为当我们要处理的样本量很大时,只有最高阶项才是最重要的,其余都不要
        时间复杂度是衡量算法流程的复杂程度的一种指标,该指标只与数据量有关,与过程之外的优化无关


        KeyPoint 只关注循环执行次数最多的一段代码 <=> 分析最多执行的代码语句
             和数据量(n)无关的语句就是常数操作 -> O(1)
             和数据量(n)有关的语句就不是常数操作

        参考文档 https://aijishu.com/a/1060000000008661#item-3-6

        加法法则:总的时间复杂度就等于量级最大的那段代码的时间复杂度
        乘法法则:嵌套代码的复杂度等于嵌套内外代码复杂度的乘积(如:递归,多重循环)
        多个规模求加法:比如方法有两个参数控制两个循环的次数,那么这时就取二者复杂度相加
        多个规模求乘法:比如方法有两个参数控制两个循环的次数,那么这时就取二者复杂度相乘



      2)如何确定算法流程的总操作数量与样本数量之间的表达式关系？
        估计程序的时间复杂度,使用程序最差的情况,不能使用最好的情况
        把整个流程彻底拆分为一个个基本动作,保证每个动作都是常数时间的操作(系统API调用需要拆分)
        如果数据量为N,看看基本动作的数量和N是什么关系

      3)常见的常数时间的操作
        常见的算术运算（+、一、*、/、%等）
        常见的位运算（>>、>>>、<<、|、&、A等）
        赋值、比较、自增、自减操作等
        数组寻址操作
        总之,执行时间固定的操作都是常数时间的操作
        反之,执行时间不固定的操作,都不是常数时间的操作

      4)排序:1 < logN < N < NlogN < N^2 < N^3 < N^ K < 2^N < k^N < N!

     二.额外空间复杂度
        你要实现一个算法流程,在实现算法流程的过程中,你需要开辟一些空间来支持你的算法流程
            作为输入参数的空间,不算额外空间
            作为输出结果的空间,也不算额外空间
            因为这些都是必要的,和现实目标有关的,所以都不算
        但除此之外,你的流程如果还需要开辟空间才能让你的流程继续下去,这部分空间就是额外空间
        如果你的流程只需要开辟有限几个变量,并且变量个数和数据量N大小无关,额外空间复杂度就是O(1)

     三.算法流程的常数项
        我们会发现,时间复杂度这个指标,是忽略低阶项和所有常数系数的
        难道同样时间复杂度的流程,在实际运行时候就一样的好吗？
        当然不是,时间复杂度只是一个很重要的指标而已
        如果两个时间复杂度一样的算法,你还要去在时间上拼优劣,就进入到拼常数时间的阶段,简称拼常数项

     //---------------------------------------

     算法流程的常数项的比拼方式
        放弃理论分析,生成随机数据直接测
        为什么不去理论分析？
        不是不能纯分析,而是没必要。因为不同常数时间的操作,虽然都是固定时间,但还是有快慢之分的。
        比如,位运算的常数时间原小于算术运算的常数时间,这两个运算的常数时间又远小于数组寻址的时间。
        所以如果纯理论分析,往往会需要非常多的分析过程。都已经到了具体细节的程度,莫不如交给实验数据好了。

     //---------------------------------------

     面试、比赛、刷题中,一个问题的最优解是什么意思？
        一般情况下,认为解决一个问题的算法流程,在时间复杂度的指标上,一定要尽可能的低,
        先满足了时间复杂度最低这个指标之后,之后再使用最少的空间的算法流程,叫这个问题的最优解。
        一般说起最优解都是忽略掉常数项这个因素的,因为这个因素只决定了实现层次的优化和考虑,而和怎么解决整个问题的思想无关
        注意:平时面试,考试,时间复杂度是需要考的,不会卡你常数项时间

     //---------------------------------------

     算法和数据结构学习的大脉络
        1)知道怎么算的算法
        2)知道怎么试的算法(写递归)
     我们所有的题目讲解,对于大脉络的实践贯穿始终

     //---------------------------------------

     认识对数器
        1)你想要测的方法a
        2)实现复杂度不好,但是容易实现(能保证功能正确性)的方法b
        3)实现一个随机样本产生器(产生小一点的样本量,将错误输出结果打印出来)
        4)把方法a和方法b跑相同的随机样本,看看得到的结果是否一样
        5)如果有一个随机样本使得比对结果不一致，打印样本进行人工干预，改对方法a和方法b
          通过错误例子,代入方法,或者通过打断点,每步打印每步信息的方法,进行调试
        6)当样本数量很多时比对测试依然正确，可以确定方法a已经正确
     */
}
