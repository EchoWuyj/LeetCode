package alg_02_train_dm._26_day_动态规划一_二刷._05_DP_NoteII;

/**
 * @Author Wuyj
 * @DateTime 2023-06-03 20:55
 * @Version 1.0
 */
public class _05_DP_NoteII {

    /*

        什么问题可以使用动态规划来解决

                 斐波那契问题   |
        最优值  | 硬币找零问题  | => 穷举 => 抽象树形结构(节点存在重复计算)
                | 最小路径和    |                ↓
                                           DFS / 回溯
                                                ↓ 消除重复计算
                                           记忆化搜索：将每个节点计算出的结果缓存
                                                      下次遇到直接从缓存中获取即可
                                                ↓
                       动态规划       ←     递归(开销)
                          ↓     消除递归开销
                       1.迭代实现
                       2.状态定义 → 状态参数(行列含义)：如 (i,j) 行列坐标      | 回溯中每个节点值作为状态
                                ↘ 状态值(求解问题，一般是最xxx)：如：dp[i][j] 最小路径和   | 计算出来的值作为状态值
                       3.状态转移 → 直接写出转移方程
                                ↘ 填表法

        遇到问题，满足下面这两个条件，尝试使用动态规划
         1.求最优值问题，这个最优值是可以通过穷举(或者说暴力)求解得到
         2.在穷举的过程中存在重复计算，动态规划可以消除重复计算
         (动态规划将穷举过程中每个状态先缓存下来，下次再遇到相同的问题直接获取，消除重复计算)


     */
}
