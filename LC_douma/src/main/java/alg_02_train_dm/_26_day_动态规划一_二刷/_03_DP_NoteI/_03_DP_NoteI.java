package alg_02_train_dm._26_day_动态规划一_二刷._03_DP_NoteI;

/**
 * @Author Wuyj
 * @DateTime 2023-06-03 18:23
 * @Version 1.0
 */
public class _03_DP_NoteI {
    /*
         一、动态规划的四个步骤
             1.定义状态数组(dp) -> 难点
             2.初始化状态数组
             3.状态转移 -> 难点
             4.返回最终需要的状态值

         二、动态规划步骤总结
             一个问题，若可以使用'动态规划'来解决，必然可以使用'穷举'来解决
             问题 -> 穷举 -> 抽象树形结构
                                 ↓
                              DFS/回溯(重复子问题)
                                 ↓
                              记忆化搜索
                               ↙     ↘
                      状态定义(memo)  状态转移  →  自底而上演示(树形结构，叶子节点 -> 根节点)
                                              ↘  填表法
                                                    1.从 dp[0] 或者 dp[n]中得知道，推导方向
                                                    2.二维 dp 矩阵，第一行，第一列
         三、动态规划三个特征
             1.存在重复子问题

             2.无后效性 => 后面的选择(状态) 不会影响 前面的选择(状态)
                        => 一个状态的状态值一旦被确定 dp[1]，那么这个状态值不受后面的状态的影响 dp[2]，dp[3]，...，dp[n]

             3.最优子结构 => 每个状态的状态值都是最优的 => dp[i]
                         => 后面的状态的状态值可以由前面一个状态或者多个状态的状态值推导出来 => 状态转移方程

         四、动态规划求解问题 => 最优值(最多，最少)

     */
}
