package alg_02_train_dm._06_day_位运算;

/**
 * @Author Wuyj
 * @DateTime 2023-04-21 19:40
 * @Version 1.0
 */
public class _00_Note_位运算_技巧 {
    /*
            位运算技巧

            =====================================================================

            1. 拿到二进制的低 16 位 => n & OxFFFF (32位 OxFFFFFFFF)
                n         0000 1010 0001 0000 1111 0010 0000 1010
                &         0000 0000 0000 0000 1111 1111 1111 1111 => 16 进制表示 OxFFFF
                --------------------------------------------------
                          0000 0000 0000 0000 1111 0010 0000 1010

                &  0 => 消去不想要位
                   1 => 保留想要位

            =====================================================================

            2. 对二进制的高 16 位进行取反 => 先对低 16 位取反，再对整个二进制取反 => ~(n ^ 0xFFFF)
                n         0000 1010 0001 0000 1111 0010 0000 1010
                ^ OxFFFF  0000 0000 0000 0000 1111 1111 1111 1111
                -----------------------------------------------
                          0000 1010 0001 0000 0000 1101 1111 0101 => 高 16 位不变，低 16 位取反

                ^ 1 ，0 => 0，1 保持不变
                      1 => 0，1 取反

                       ~  0000 1010 0001 0000 0000 1101 1111 0101
                -------------------------------------------------
                          1111 0101 1110 1111 1111 0010 0000 1010 => 高 16 位取反，低 16 位再取反，变成会原样

                OxFFFF => mask 掩码

            =====================================================================

            3. 判断第 i + 1 位是否是 1 => (n & (1 << i))！= 0
                     KeyPoint '最后一位'是否是 1 =>  n & 1 != 0，n 再前移一位
                n     0000 1010 0001 0000 1111 0010 0000 1010 => 判断 1 位否是 1
                &     0000 0000 0000 0000 0000 0000 0000 0001 => 1 二进制形式中，1 就在 1 位上，故 i = 0
                -----------------------------------------------
                      0000 0000 0000 0000 0000 0000 0000 0000

                (i+1) & 1 => 若 res 1，i+1 为 1
                          => 若 res 0，i+1 为 0

            =====================================================================

            4. 去掉最后一位 1 => n & (n-1) => KeyPoint 记忆：去掉最后一位 1，变成 n-1
                n     0000 1010 0001 0000 1111 0010 0000 1010 => 将最后一位 1 去掉
              & n-1   0000 1010 0001 0000 1111 0010 0000 1001
                -----------------------------------------------
                      0000 1010 0001 0000 1111 0010 0000 1000

            =====================================================================

            5. 获取最后一位 1 => n & (-n)
                                或者 n & ~(n-1)
                                或者 n^(n & (n-1))

                n     0000 1010 0001 0000 1111 0010 0000 1010
               -n     1000 1010 0001 0000 1111 0010 0000 1010 => 但是运算过程，使用的补码
               反码    1111 0101 1110 1111 0000 1101 1111 0101
               加 1    1111 0101 1110 1111 0000 1101 1111 0110

                n     0000 1010 0001 0000 1111 0010 0000 1010
              & -n    1111 0101 1110 1111 0000 1101 1111 0110
              -------------------------------------------------
                      0000 0000 0000 0000 0000 0000 0000 0010 => 获取最后一位 1

            =====================================================================

            6. A 的位减去 B 的位：A &(～B)
                A   0000 1011 1111 0010 0000 0000 1101 0000
                B   0000 0001 0010 1111 1101 0000 1010 1000
                -------------------------------------------
                    0000 1010 1101 0000 0000 0000 0101 0000 => 简单理解 0-1 的结果是 0

               ~B   1111 1110 1101 0000 0010 1111 0101 0111

                A   0000 1011 1111 0010 0000 0000 1101 0000
             & ~B   1111 1110 1101 0000 0010 1111 0101 0111
             --------------------------------------------------
                    0000 1010 1101 0000 0000 0000 0101 0000

            补充：拆分相减
                     11101011
                   - 10000000
                  -------------
                     01101011
                  -  00010000
                  -------------
                     01011011
                  -  00000110
                  -----------
                     1010101

            =====================================================================

            7. ^ 用法技巧
                a ^ 0 = a
                a ^ a = 0
                a ^ b ^ c= a ^ c ^ b

                a  0101 0001
              ^ 0  0000 0000
               --------------
                   0101 0001

                a  0101 0001
              ^ a  0101 0001
               --------------
                   0000 0000
     */
}
