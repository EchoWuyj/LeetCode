package alg_02_train_dm._02_day_一维数组;

/**
 * @Author Wuyj
 * @DateTime 2023-04-29 19:53
 * @Version 1.0
 */
public class _09_Note_直接模拟 {
    /*

        模拟算法 => 照着葫芦画瓢
        根据题目表述进行筛选提取关键要素，按需求书写代码解决实际问题
        模拟算法，思维难度简单，但对代码的掌握能力要求很高
        模拟理论基础：抽象的能力

        leetcode上的题，都有一个特点，偏算法实现，基本算法模型能在题面上第一时间看出来
        但有一天你面试的时候，发现在平时几十个字的算法题，变成了几百个字的小作文。
        面试要求就是，要你抽象出算法模型，然后用合适的算法去解决它，这时抽象能力差了，题都读不明白，更别说解题了

        解题心得
        模拟题一般是思维难度上简单，代码实现上较难。
        一道算法题，能用其它解法就不要用模拟法，因为时间复杂度比较高。
        模拟题很考察代码掌握能力。
        要想模拟题做的好，抽象能力少不了。
        多做模拟题有个好处，即我们能第一时间知道这题是不是模拟题，而不用去想巧解，否则会在不通的路浪费了时间。


        模拟算法
        特点
        1.码量大
        2.操作多
        3.思路繁复杂
        4.较为复杂的模拟题，出错后难以定位错误

        技巧
        1.在动手写代码之前，在草纸上尽可能地写好要实现的流程.
        2.在代码中，尽量把每个部分模块化，写成函数、结构体或类.
        3.对于一些可能重复用到的概念，可以统一转化，方便处理
          如：某题给你 "YY-MM-DD 时：分' 把它抽取到一个函数，处理成秒，会减少概念混淆
        4.调试时分块调试。模块化的好处就是可以方便的单独调某一部分。
        5.写代码的时候一定要思路清晰，不要想到什么写什么，要按照落在纸上的步骤写。

     */
}
