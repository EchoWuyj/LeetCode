package alg_02_train_dm._30_day_动态规划五_总结;

/**
 * @Author Wuyj
 * @DateTime 2023-06-16 16:17
 * @Version 1.0
 */
public class _00_Note_Summary {

    /*
        一、动态规划总结
        二、动态规划分析总结
        三、动态对话练习

        1.动态规划四个步骤
            1.1 定义状态数组(dp)
            1.2 初始化状态数组
            1.3 状态转移
            1.4 返回最终需要的状态值

        2 问题 -> 穷举 -> 抽象树形结构
                         ↓
                      DFS/回溯(重复子问题)
                         ↓
                      记忆化搜索
                       ↙     ↘
              状态定义(memo)  状态转移  →  自底而上演示
                                      ↘  填表法

         3.动态规划三个特征
             1.存在重复子问题

             2.无后效性 1.后面的选择(状态)不会影响前面的选择(状态)
                       2.一个状态的状态值一旦被确定，那么这个状态值不受后面的状态的影响
                        => 硬币找零，后面硬币选择，不会影响前面硬币选择

             3.最优子结构 1.每个状态的状态值都是最优的 => dp[i]
                         2.后面的状态的状态值可以由前面一个状态或者多个状态的状态值推导出来
                           => dp[i] = 处理逻辑 {dp[i-1]，dp[i-2] ...}

          题目做多之后，遇到具有以下特征的题目 => 动态规划
              1.求最优值问题，这个最优值是可以通过穷举(或者说暴力)求解得到
              2.在穷举的过程中存在重复计算，动态规划可以消除重复计算

         4.动态对话可以解决的问题

           |  1.求 "最" 优解问题(最大值和最小值) | 152.乘积最大子数组
           |                                   | 409.最长回文串
           |                                   | 300.最长递增子序列
           |
           |  2.求可行性(true 或者 false) | 322.零钱兑换
           |                             | 97.交错字符串
           |
           |  3.求方案总数 | 518.零钱兑换 II
                         | 68 不同路径


          5.动态规划分类：
              1.线性动态规划问题
              2.区间动态规划问题
              3.背包系列问题
              4.状态压缩动态规划问题(偏竞赛)
              5.数位动态压缩问题(偏竞赛)

          5.1 线性动态规划问题 => 在线性数据结构上，使用动态规划算法

              力扣 198 打家劫舍 => 树形结构，相同节点，存在重复计算
                                  考虑问题：自顶而下，计算问题：自底而上()
                                  自顶而下： dfs + 记忆化搜索
                                  自底而上：动态规划，从叶子节点状态 => 父节点状态 => root 节点
                               => 数组或字符串处理：从左往右 或者 从右往左

              力扣 53 最大子数组和 => 暴力枚举所有区间 => 重叠区间 => 重复计算
                                  => 通过状态转移方程，推导出后面 dp[i] 值，消除重复计算
                                     dp[i] = max{dp[i-1]+nums[i],nums[i]}
                                     优化：dp[i] 表示数组区间 [0...i] 的最大子数组之和
                                     注意：必须以 nums[i] 结尾，也就说必须选择 nums[i]
                                  => 将问题规模变小，先求规模小的子问题，再求规模大的子问题，类似分治思想
                                     将子问题的最优解，按照某种方式组合：状态转移方程，得到全局最优解

              一、输入为一个数组或者一个字符串
                  (1) dp[i] 依赖于前面一个或者两个状态计算得到 => dp[i] 依赖 dp[i-1] 或者 dp[i-2]
                      力扣 53 最大子数组和
                      力扣 91 解码方法
                      力扣 152 乘积最大子数组 (双状态)
                      力扣 376 摆动序列 (双状态)
                      力扣 198 打家劫舍
                      力扣 213 打家劫舍 II
                   √  [新增]力扣 740 删除并获得点数(抽象成打家劫舍模型)
                      力扣 509 斐波那契数
                      力扣 70 爬楼梯问题
                      力扣 746 使用最小花费爬楼梯
                   √  [新增]力扣 413 等差数列划分
                      [新增]力扣 918 环形子数组的最大和 => 问题可以转化为: 先求最大子数组和，再求最小子数组和

                  (2) dp[i] 依赖于前面多个状态计算得到
                      力扣 300 最长递增子序列 - Longest Increasing Subsequence (LIS)
                                              => 依赖于前面多个状态计算得到 => 多一层 for 循环，遍历 i 之前所有状态
                                              => 很多问题都可以转成 LIS
                      力扣 354 俄罗斯套娃信封问题
                      [新增]力扣 673 最长递增子序列的个数 => LIS 应用
                      [新增]力扣 368 最大整除子集 => LIS 应用
                      力扣 32 最长有效括号
                      力扣 139 单词拆分

                  (3) dp[i] 带有一个或者多个维度
                      [新增]力扣 256 粉刷房子 => 增加了 '颜色' 维度
                      [新增]力扣 410 分割数组的最大值
                      [新增]力扣 813 最大平均值和的分组
                      [新增]力扣 1027 最长等差数列
                      [新增]力扣 873 最长的斐波那契子序列的长度
                      [新增]力扣 1230 抛掷硬币
                      力扣 121 买卖股票的最佳时机
                      力扣 122 买卖股票的最佳时机 II
                      力扣 123 买卖股票的最佳时机 III
                      力扣 188 买卖股票的最佳时机 IV  => 增加了 '交易次数' 和 '是否持有股票' 两个维度
                      力扣 309 最佳买卖股票时机含冷冻期
                      力扣 714 买卖股票的最佳时机含手续费

              二、输入为两个数组或者两个字符串
                   (1) 经典 LCS 问题
                       力扣 1143 最长公共子序列 (Longest Common Subsequence) (LCS)
                                 => dp[i][j]：text1 前 i 个字符和 text2 前 j 个字符的最长公共子序列长度

                       力扣 718 最长重复子数组 => LCS 应用
                                 => dp[i][j]：表示 nums1 中前 i 个元素中和 nums2 的前 j 个元素中最长公共子数组长度
                                 => 补充：上面两题 dp[i][j] 一般可以由 dp[i-1][j]，dp[i][j-1]，dp[i-1][j-1] 推导而来
                                    具体推导的表达式，每道题都是不一样的，需要具体题目，具体分析

                       [新增]力扣 583 两个字符串的删除操作 => 转成 LCS
                       [新增]力扣 712 两个字符串的最小ASCII删除和 => 转成 LCS

                   (2) 字符串匹配问题
                       力扣 10 正则表达式匹配
                       力扣 44 通配符匹配
                       力扣 72 编辑距离

                   (3) 其他
                       力扣 97 交错字符串
                       [新增]力扣 115 不同的子序列

              三、输入为矩阵：
                  力扣 64 最小路径和 => dp[i][j]：要么以 [i,j] 为起点，要么以 [i,j] 为终点
                                    => 若以 [i,j] 为终点，dp[i][j] 一般可以由 dp[i-1][j]，dp[i][j-1]，dp[i-1][j-1] 推导而来
                                    => 若以 [i,j] 为起点，dp[i][j] 一般可以由 dp[i+1][j]，dp[i][j+1]，dp[i+1][j+1] 推导而来
                  力扣 62 不同路径
                  力扣 63 不同路径 II
                  力扣 120 三角形最小路径和
                  力扣 97 交错字符串
                  [新增]力扣 931 下降路径最小和
                  力扣 221 最大正方形


          5.2 区间动态规划问题：
              一、回文问题
                  力扣 5 最长回文子串 => dp[i][j] 表示数组/字符串区间 [i,j] 对应的子数组/子串的状态值
                                     => 大的区间 [i,j] 状态 dp[i][j] 是由 小的区间 [i+1,j-1] 的状态 dp[i+1][j-1] 所决定的
                                     => dp[i][j] 一般可以由 dp[i+1][j]，dp[i][j-1]，dp[i-1][j-1] 推导而来
                  力扣 131 分割回文串
                  力扣 516 最长回文子序列
                  力扣 647 回文子串
                  [新增]力扣 132 分割回文串 II
                  [新增]力扣 1312 让字符串成为回文串的最少插入次数

              二、其他
                  力扣 486 预测赢家
                  [新增]力扣 312 戳气球

          5.3 背包系列问题：
               一、0-1 背包问题
                   力扣 416 分割等和子集
                   力扣 494 目标和
                   [新增]力扣 1049 最后一块石头的重量 II

               二、完全/多重背包问题
                   力扣 139 单词拆分
                   力扣 279 完全平方数
                   力扣 322 零钱兑换
                   力扣 518 零钱兑换 II
                   力扣 377 组合总和 Ⅳ

               三、二维费用背包
                   力扣 474 一和零
                   [新增]力扣 879 盈利计划

          -------------------------------------------------------------------------------------


          状态压缩动态规划问题(偏竞赛)：
               [新增]力扣 351 安卓系统手势解锁
               [新增]力扣 464 我能赢吗
               [新增]力扣 980 不同路径 III
               [新增]力扣 698 划分为k个相等的子集
               [新增]力扣 847 访问所有节点的最短路径
               [新增]力扣 943 最短超级串
               [新增]力扣 526 优美的排列
               [新增]力扣 935 骑士拨号器
               [新增]力扣 1349 参加考试的最大学生数
               [新增]力扣 638 大礼包
               [新增]力扣 691 贴纸拼词
               [新增]力扣 982 按位与为零的三元组

          数位动态压缩问题(偏竞赛)：
               [新增]力扣 902 最大为 N 的数字组合
               [新增]力扣 248 中心对称数 III
               [新增]力扣 357 计算各个位数不同的数字个数
               [新增]力扣 600 不含连续1的非负整数
               [新增]力扣 1012 至少有 1 位重复的数字
               [新增]力扣 1088 易混淆数 II
               [新增]力扣 233 数字 1 的个数
               [新增]力扣 1067 范围内的数字计数


     */
}
